services:
  postgres-db:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_USER=seo_audit_user
      - POSTGRES_PASSWORD=your_strong_password
      - POSTGRES_DB=seo_audit_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seo_audit_user -d seo_audit_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: "rabbitmq:3-management-alpine"
    container_name: "rabbitmq"
    ports:
      - "5672:5672"  # AMQP protocol port for Celery
      - "15672:15672" # Management UI port for browser access
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Note: For production, you would use persistent volumes to store data.
    # For local development, this is not strictly necessary.

  web:
    build: .
    container_name: "fastapi-app"
    ports:
      - "${API_PORT:-8000}:${API_PORT:-8000}"
    volumes:
      - .:/app  # Mounts the current directory into the container for live code reloading
    env_file:
      - .env
    command: >
      sh -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port ${API_PORT:-8000} --reload"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-db:
        condition: service_healthy

  worker:
    build: .
    container_name: "celery-worker"
    volumes:
      - .:/app
    env_file: .env
    command: >
      sh -c "celery -A app.celery_app.celery_app worker --loglevel=info"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-db:
        condition: service_healthy

volumes:
  postgres_data: 